// Generated by CoffeeScript 1.9.2
"use strict";
var addPoints, fetch, id, interpolateHsl, map, mapOptions, mapStyle, reset, styleFeature;

reset = function() {
  return {
    id: [],
    velocity: [],
    altitude: [],
    latitude: [],
    longitude: []
  };
};

window.running = true;

window.interval = 1000;

window.data = reset();

map = void 0;

mapStyle = [
  {
    "featureType": "administrative",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "administrative.country",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#DCE7EB"
      }
    ]
  }, {
    "featureType": "administrative.country",
    "elementType": "labels.text",
    "stylers": [
      {
        "visibility": "on"
      }, {
        "color": "#000000"
      }
    ]
  }, {
    "featureType": "administrative.country",
    "elementType": "labels.icon",
    "stylers": [
      {
        "visibility": "on"
      }, {
        "color": "#000000"
      }
    ]
  }, {
    "featureType": "administrative.province",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#DCE7EB"
      }
    ]
  }, {
    "featureType": "landscape",
    "elementType": "geometry",
    "stylers": [
      {
        "visibility": "on"
      }
    ]
  }, {
    "featureType": "landscape.natural",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "poi",
    "elementType": "all",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "road",
    "elementType": "all",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "road",
    "elementType": "geometry",
    "stylers": [
      {
        "visibility": "simplified"
      }
    ]
  }, {
    "featureType": "road",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "transit",
    "elementType": "labels.icon",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "transit.line",
    "elementType": "geometry",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "transit.line",
    "elementType": "labels.text",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "transit.station.airport",
    "elementType": "geometry",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "transit.station.airport",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }, {
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#83888B"
      }
    ]
  }, {
    "featureType": "water",
    "elementType": "labels",
    "stylers": [
      {
        "visibility": "off"
      }
    ]
  }
];

mapOptions = {
  center: {
    lat: 59.34806,
    lng: 18.07142
  },
  zoom: 18,
  styles: mapStyle,
  disableDefaultUI: true,
  mapMaker: true,
  minZoom: 10
};

styleFeature = function(feature) {
  var color, fraction, high, id, low, max, min, scale, z;
  low = [134, 91, 50];
  high = [0, 100, 50];
  min = 1.0;
  max = 12.0;
  fraction = (Math.min(feature.getProperty('velocity'), max) - min) / (max - min);
  color = interpolateHsl(low, high, fraction);
  scale = 250 / map.getZoom();
  id = feature.getProperty("id");
  z = id;
  if (id % 5 !== 0) {
    scale = 100 / map.getZoom();
    z = z / 5;
  }
  return {
    icon: {
      path: google.maps.SymbolPath.CIRCLE,
      strokeWeight: 1.25,
      strokeColor: "#fff",
      fillColor: color,
      fillOpacity: 0.95,
      scale: scale
    },
    zIndex: z
  };
};

interpolateHsl = function(lowHsl, highHsl, fraction) {
  var color, i;
  color = [];
  i = 0;
  while (i < 3) {
    color[i] = (highHsl[i] - lowHsl[i]) * fraction + lowHsl[i];
    i++;
  }
  return "hsl(" + color[0] + ", " + color[1] + "%, " + color[2] + "%)";
};

id = -1;

fetch = function() {
  var json, lap;
  json = {};
  lap = 19;
  $.ajax({
    url: "lol.php",
    type: "GET",
    data: {
      id: id
    },
    success: function(data, code, xhr) {
      var j, k, len, len1, point, property, ref, ref1;
      console.log(xhr.status);
      if (xhr.status === 204) {
        return;
      }
      json = JSON.parse(data);
      if (json == null) {
        return;
      }
      window.data = reset();
      ref = json.features;
      for (j = 0, len = ref.length; j < len; j++) {
        point = ref[j];
        ref1 = ["id", "velocity", "altitude", "latitude", "longitude"];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          property = ref1[k];
          window.data[property].push(point.properties[property]);
        }
      }
      id = json.features[json.features.length - 1].properties.id;
      return map.data.addGeoJson(json);
    },
    error: function(error) {
      return console.log(error);
    },
    statusCode: {
      205: function() {
        return window.running = false;
      }
    }
  });
  return json;
};

addPoints = function() {
  var json;
  if (!window.running) {
    return;
  }
  json = fetch();
};

google.maps.event.addDomListener(window, 'load', function() {
  map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
  map.data.setStyle(styleFeature);
  map.data.addListener('mouseover', function(event) {
    document.getElementById('latitude').textContent = event.feature.getGeometry().get().lat().round(5);
    document.getElementById('longitude').textContent = event.feature.getGeometry().get().lng().round(5);
    document.getElementById('velocity').textContent = event.feature.getProperty("velocity").round(2);
    document.getElementById('altitude').textContent = event.feature.getProperty("altitude");
    document.getElementById('timestamp').textContent = new Date(event.feature.getProperty("timestamp")).toLocaleString();
    document.getElementById('lap').textContent = event.feature.getProperty("lap");
    document.getElementById('id').textContent = event.feature.getProperty("id");
  });
});

$('*').keypress(function() {});

$(function() {
  return setInterval(addPoints, window.interval);
});

Array.prototype.last = function() {
  return this[this.length - 1];
};

Number.prototype.round = function(places) {
  return +(Math.round(this + "e+" + places) + "e-" + places);
};


//# sourceMappingURL=points.js.map
